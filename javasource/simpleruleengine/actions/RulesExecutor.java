// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package simpleruleengine.actions;

import com.mendix.core.Core;
import com.mendix.simplerulesengine.exception.RuleEngineException;
import com.mendix.simplerulesengine.mendixapi.MendixAPIRegistry;
import com.mendix.simplerulesengine.model.Rule;
import com.mendix.simplerulesengine.service.RuleEngine;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import simpleruleengine.implementtion.CoreMapper;
import simpleruleengine.implementtion.MendixCoreLoggerImpl;
import simpleruleengine.implementtion.MendixCoreMetaObjectOperationsImpl;
import simpleruleengine.implementtion.MendixMicroflowCallImpl;
import simpleruleengine.proxies.Rules;

import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class RulesExecutor extends CustomJavaAction<java.lang.Void>
{
	private IMendixObject __RuleNamespace;
	private simpleruleengine.proxies.RulesNamespace RuleNamespace;
	private IMendixObject InputData;

	public RulesExecutor(IContext context, IMendixObject RuleNamespace, IMendixObject InputData)
	{
		super(context);
		this.__RuleNamespace = RuleNamespace;
		this.InputData = InputData;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		this.RuleNamespace = this.__RuleNamespace == null ? null : simpleruleengine.proxies.RulesNamespace.initialize(getContext(), __RuleNamespace);

		// BEGIN USER CODE
		if(this.RuleNamespace == null)
			throw new RuleEngineException("Rule namespace cannot be empty");

		List<IMendixObject> rulesMxObj = Core.retrieveByPath(getContext(), this.RuleNamespace.getMendixObject(), Rules.MemberNames.Rules_RulesNamespace.toString());

		List<Rules> rules = Optional.ofNullable(rulesMxObj)
				.orElse(Collections.emptyList())
				.stream()
				.map(ele -> Rules.initialize(getContext(), ele))
				.collect(Collectors.toList());

		if(rules.size() == 0)
			throw new RuleEngineException("Rules are empty in selected namespace");

		MendixAPIRegistry.setMendixCoreLogger(new MendixCoreLoggerImpl());
		MendixAPIRegistry.setMendixCoreMetaObjectOperator(new MendixCoreMetaObjectOperationsImpl(getContext()));
		MendixAPIRegistry.setMendixMicroflowCaller(new MendixMicroflowCallImpl(getContext()));

		MendixCoreLoggerImpl.logNode.info(String.format("Initializing SimpleRuleEngine for namespace %s", this.RuleNamespace.getNamespace()));
		var ruleEngine = new RuleEngine();
		for (var rule : rules)
		{
			var coreRule = new Rule();
			CoreMapper.mapToCore(rule, coreRule);
			ruleEngine.addRule(coreRule);
		}

		ruleEngine.execute(this.InputData);

		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "RulesExecutor";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
